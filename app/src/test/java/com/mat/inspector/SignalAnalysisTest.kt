package com.mat.inspector

import org.junit.Test
import kotlin.math.PI

class SignalAnalysisTest {

    @Test
    fun `test get signal data`() {
        val fs = 32.0
        var samples = doubleArrayOf(0.0,8.4096,14.245,15.761,12.591,5.8383,-2.3206,-9.368,-13.262,-13.06,-9.1503,-3.0291,3.2677,7.8684,9.6524,8.5259,5.3199,1.379,-1.9777,-3.9151,-4.2944,-3.5841,-2.5378,-1.7937,-1.5754,-1.6216,-1.3662,-0.28326,1.7666,4.3526,6.5548,7.2983,5.8171,2.059,-3.1492,-8.2726,-11.545,-11.597,-8.0038,-1.5424,5.9629,12.184,15.047,13.451,7.6882,-0.59353,-8.8855,-14.62,-16.004,-12.611,-5.516,3.0598,10.479,14.542,14.173,9.7188,2.7668,-4.4307,-9.7192,-11.722,-10.21,-6.068,-0.87918,3.6727,6.3755,6.8257,5.4338,3.1308,0.92031,-0.53269,-1.1125,-1.1933,-1.3566,-2.0257,-3.1904,-4.3532,-4.7307,-3.6316,-0.84878,3.1146,7.1047,9.671,9.6009,6.4359,0.76002,-5.8749,-11.395,-13.884,-12.269,-6.7543,1.156,9.0905,14.559,15.772,12.252,5.0179,-3.7254,-11.295,-15.397,-14.855,-9.9696,-2.3807,5.504,11.309,13.443,11.561,6.5811,0.28894,-5.3123,-8.6713,-9.1403,-7.0711,-3.5573,0.054209,2.676,3.8254,3.686,2.8909,2.1459,1.8655,1.9855,2.0269,1.381,-0.32033,-2.9191,-5.6758,-7.4913,-7.3355,-4.7188,-0.0074098,5.5666,10.241,12.306,10.739,5.6468,-1.6578,-9.0077,-14.059,-15.072,-11.532,-4.3715,4.2847,11.783,15.797,15.088,9.9045,1.8943,-6.4449,-12.583,-14.766,-12.544,-6.8519,0.36545,6.8409,10.731,11.169,8.4507,3.8091,-1.0967,-4.7879,-6.4351,-6.0373,-4.2741,-2.1232,-0.4167,0.47808,0.73114,0.86472,1.4089,2.5632,4.0244,5.0701,4.8715,2.9105,-0.6839,-5.0383,-8.7499,-10.358,-8.9121,-4.4091,2.0716,8.6292,13.129,13.929,10.483,3.6087,-4.7079,-11.917,-15.728,-14.871,-9.5358,-1.3346,7.2141,13.498,15.649,13.133,6.8818,-1.0542,-8.205,-12.489,-12.854,-9.5361,-3.8852,2.1701,6.8014,8.8624,8.1779,5.4667,1.9604,-1.1114,-2.9631,-3.4604,-3.0369,-2.382,-2.0544,-2.1972,-2.4788,-2.2847,-1.0704,1.2859,4.2988,6.9627,8.1006,6.849,3.0876,-2.3741,-7.9571,-11.794,-12.378,-9.1432,-2.7647,4.9699,11.686,15.19,14.214,8.885,0.73159,-7.7768,-14.018,-16.067,-13.319,-6.6808,1.7453,9.355,13.89,14.145,10.301,3.7919,-3.2344,-8.6514,-11.033,-10.046,-6.437,-1.6664,2.67,5.3936)
        var sigData = getSignalData(fs, fft(samples))
        assert(inMargin(2.5, sigData.frequency))
        assert(inMargin(9.12, sigData.amplitude!!))

        samples = doubleArrayOf(7.188,8.2646,6.3031,2.0245,-2.9983,-6.9189,-8.2961,-6.6235,-2.5162,2.5162,6.6235,8.2961,6.9189,2.9983,-2.0245,-6.3031,-8.2646,-7.188,-3.4691,1.5251,5.9587,8.2018,7.4299,3.9267,-1.02,-5.5917,-8.1078,-7.6435,-4.3694,0.51096,5.2035,7.9832,7.8282,4.7955,7.1152e-15,-4.7955,-7.8282,-7.9832,-5.2035,-0.51096,4.3694,7.6435,8.1078,5.5917,1.02,-3.9267,-7.4299,-8.2018,-5.9587,-1.5251,3.4691,7.188,8.2646,6.3031,2.0245,-2.9983,-6.9189,-8.2961,-6.6235,-2.5162,2.5162,6.6235,8.2961,6.9189,2.9983,-2.0245,-6.3031,-8.2646,-7.188,-3.4691,1.5251,5.9587,8.2018,7.4299,3.9267,-1.02,-5.5917,-8.1078,-7.6435,-4.3694,0.51096,5.2035,7.9832,7.8282,4.7955,4.6767e-14,-4.7955,-7.8282,-7.9832,-5.2035,-0.51096,4.3694,7.6435,8.1078,5.5917,1.02,-3.9267,-7.4299,-8.2018,-5.9587,-1.5251,3.4691,7.188,8.2646,6.3031,2.0245,-2.9983,-6.9189,-8.2961,-6.6235,-2.5162,2.5162,6.6235,8.2961,6.9189,2.9983,-2.0245,-6.3031,-8.2646,-7.188,-3.4691,1.5251,5.9587,8.2018,7.4299,3.9267,-1.02,-5.5917,-8.1078,-7.6435,-4.3694,0.51096,5.2035,7.9832,7.8282,4.7955,-6.1018e-14,-4.7955,-7.8282,-7.9832,-5.2035,-0.51096,4.3694,7.6435,8.1078,5.5917,1.02,-3.9267,-7.4299,-8.2018,-5.9587,-1.5251,3.4691,7.188,8.2646,6.3031,2.0245,-2.9983,-6.9189,-8.2961,-6.6235,-2.5162,2.5162,6.6235,8.2961,6.9189,2.9983,-2.0245,-6.3031,-8.2646,-7.188,-3.4691,1.5251,5.9587,8.2018,7.4299,3.9267,-1.02,-5.5917,-8.1078,-7.6435,-4.3694,0.51096,5.2035,7.9832,7.8282,4.7955,-1.0983e-13,-4.7955,-7.8282,-7.9832,-5.2035,-0.51096,4.3694,7.6435,8.1078,5.5917,1.02,-3.9267,-7.4299,-8.2018,-5.9587,-1.5251,3.4691,7.188,8.2646,6.3031,2.0245,-2.9983,-6.9189,-8.2961,-6.6235,-2.5162,2.5162,6.6235,8.2961,6.9189,2.9983,-2.0245,-6.3031,-8.2646,-7.188,-3.4691,1.5251,5.9587,8.2018,7.4299,3.9267,-1.02,-5.5917,-8.1078,-7.6435,-4.3694,0.51096,5.2035,7.9832,7.8282,4.7955,1.9521e-13,-4.7955,-7.8282,-7.9832,-5.2035,-0.51096,4.3694,7.6435,8.1078,5.5917,1.02,-3.9267,-7.4299,-8.2018,-5.9587,-1.5251,3.4691,7.188)
        sigData = getSignalData(fs, fft(samples))
        assert(inMargin(3.125, sigData.frequency))
        assert(inMargin(8.3, sigData.amplitude!!))
    }

    private fun inMargin(expected: Double, actual: Double): Boolean {
        return expected * 1.05 > actual && actual > expected * 0.95
    }

    @Test
    fun `test effective value`() {
        val samples = doubleArrayOf(0.0,0.5577,1.025,1.3262,1.4124,1.2697,0.92118,0.42336,-0.14307,-0.68632,-1.1183,-1.3691,-1.3979,-1.2002,-0.8079,-0.28468,0.28468,0.8079,1.2002,1.3979,1.3691,1.1183,0.68632,0.14307,-0.42336,-0.92118,-1.2697,-1.4124,-1.3262,-1.025,-0.5577,-6.9276e-16)
        assert(inMargin(1.0, effectiveValue(samples)))
    }

    @Test
    fun `test get closest value`() {
        val bin = 3.0
        var value = 88.0
        assert(closestValue(bin, value) == 29)

        value = 89.0
        assert(closestValue(bin, value) == 30)
    }
}